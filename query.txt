>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> User.objects.all()
<QuerySet [<User: rrka79wal>, <User: Testuser>]>
>>> User.objects.first()
<User: rrka79wal>
>>> User.objects.last()
<User: Testuser>
>>> User.objects.filter(username='Testuser')
<QuerySet [<User: Testuser>]>
>>> User.objects.filter(username='Testuser').first()
<User: Testuser>
>>> user = User.objects.filter(username='Testuser').first()
>>> user
<User: Testuser>
>>> user.id
2
>>> dir(user)
['DoesNotExist', 'EMAIL_FIELD', 'Meta', 'MultipleObjectsReturned', 'REQUIRED_FIELDS', 'USERNAME_FIELD', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__',
 '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '
__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_default_pk', '_check_field_
name_clashes', '_check_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_m2m_through_same_relationship', '_ch
eck_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappabl
e', '_check_unique_together', '_do_insert', '_do_update', '_get_FIELD_display', '_get_expr_references', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order', '_get_pk_val', '_
get_unique_checks', '_legacy_get_session_auth_hash', '_meta', '_password', '_perform_date_checks', '_perform_unique_checks', '_prepare_related_fields_for_save', '_save_parents', '_save_tabl
e', '_set_pk_val', '_state', 'check', 'check_password', 'clean', 'clean_fields', 'date_error_message', 'date_joined', 'delete', 'email', 'email_user', 'first_name', 'from_db', 'full_clean',
 'get_all_permissions', 'get_deferred_fields', 'get_email_field_name', 'get_full_name', 'get_group_permissions', 'get_next_by_date_joined', 'get_previous_by_date_joined', 'get_session_auth_
hash', 'get_short_name', 'get_user_permissions', 'get_username', 'groups', 'has_module_perms', 'has_perm', 'has_perms', 'has_usable_password', 'id', 'is_active', 'is_anonymous', 'is_authent
icated', 'is_staff', 'is_superuser', 'last_login', 'last_name', 'logentry_set', 'natural_key', 'normalize_username', 'objects', 'password', 'pk', 'post_set', 'prepare_database_save', 'refre
sh_from_db', 'save', 'save_base', 'serializable_value', 'set_password', 'set_unusable_password', 'unique_error_message', 'user_permissions', 'username', 'username_validator', 'validate_uniq
ue']
>>> user.pk
2
>>> user = User.objects.get(id=1)
>>> user
<User: rrka79wal>
>>> Post.objects.all()
<QuerySet []>
>>> post_1 = Post(title='Blog 1', content='First Post content!', author=user)
>>> post_1
<Post: Post object (None)>
>>> Post.objects.all()
<QuerySet []>
>>> post_1.save()
>>> post_1
<Post: Post object (1)>
>>> Post.objects.all()
<QuerySet [<Post: Post object (1)>]>
>>> exit()

-------------------------------------------------------------------------------------------------------

>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>]>
>>> user = User.objects.get(id=1)
>>> user
<User: rrka79wal>
>>> post_2 = Post(title='Blog 2', content='Second Post Content', author_id=user.id)
>>> post_2
<Post: Blog 2>
>>> post_2.save()
>>> post_2
<Post: Blog 2>
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>]>
>>> post = Post.objects.first()
>>> post.title
'Blog 1'
>>> post.date_posted
datetime.datetime(2021, 5, 28, 7, 23, 41, 83326, tzinfo=<UTC>)
>>> post.author
<User: rrka79wal>
>>> post.author.email
'rrka79wal@gmail.com'
>>> user
<User: rrka79wal>
>>> user.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x03C76D78>
>>> user.post_set.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>]>
>>> user.post_set.create(title='Blog3', content='Third post content')
<Post: Blog3>
>>> Post.objects.all()
<QuerySet [<Post: Blog 1>, <Post: Blog 2>, <Post: Blog3>]>

-----------------------------------------------------------------------------------


>>> from django.contrib.auth.models import User
>>> user = User.objects.get(id=1)
>>> user
<User: rrka79wal>
>>> user.profile
<Profile: rrka79wal Profile>
>>> user.profile.image
<ImageFieldFile: profile_pics/RA_LOGO_square_with_white_bg.png>
>>> user.profile.image.width
2289
>>> user.profile.image.source
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ImageFieldFile' object has no attribute 'source'
>>> user.profile.image.url
'/profile_pics/RA_LOGO_square_with_white_bg.png'
>>> user = User.objects.get(id=3)
>>> user.profile.image.url
'/default.jpg'
>>> exit()
